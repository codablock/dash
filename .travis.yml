# errata:
# - sudo/dist/group are set so as to get Blue Box VMs, necessary for [loopback]
#   IPv6 support

sudo: required
dist: trusty

os: linux
language: generic

addons:
  apt:
    packages:
      # Use more recent docker version
      - docker-ce
      # Can be removed if Travis ever upgrades to Bionic
      - realpath

services:
  - docker

cache:
  apt: true
  ccache: true
  directories:
    - $HOME/cache

env:
  global:
    # DOCKER_HUB_USER
    - secure: "J0T+zrRBBzBnxoioCD378cRSJUF8Vms32QMmrENVVfuJl03oBQv0QxSatLEiD4PtRPrN00mJ8/k/HdqFQ0SN1yg6a00duOZ6C9jk6t/fExBO1LNhp3Z7lcaMUrNEyRN6sgfVeznDVTGj9jBQU2HNlwHk0UD9BNp/k+Bjhrtw7Njp9JTLZKBgxrXk0WZmfk0d75Q+9DajA1j2tSfWVpwzv6HMGfqIH1wsVEakBY+tnaE6EO3IdzdWHhf/iV+Tx0tL0Qz/6mejgSuoGLTJLmeTrceTTmsDlN3B95y+XfcYDs6EP7gpzN8Ffg/mLV8xJ2Myj7+b1o+smMJZE5tLuPIeAu0YsfkPNa/tNLotOlDxF72per0kXyNYbRf+JrpxiOu9pLCtdtd40V2SsiNhpQqHVy+b+wkkqo2syTHT+9UNkqEi3WFm6TqFuOeQNtDm6R0hRl/Talw/ZEeKs68z1Cf6VyBrZG5LqtOurtWlKwXCe/Tr1i2g4BEAcbywphtCCcfgMK9YSGQnjKkGk6k9gVEa2bneYLZz1RSh2OpXnIsIJOX7X0hNd5xtQDLgbpSUlKwVcEriWeGe12GCszKNX9gdEo2bHeq4xAJ6BE+ot745z9dc+nC2BJ6Su+I5L6zBg4m2FWn0TWhPvz/6JR26t6ls/E7m+hkwJTCHnIUiFmmzpEw="
    # DOCKER_HUB_PASSWORD
    - secure: "RLzlMhfLqwSBrZqJOVOd61suXBn+HtUR3vOZfuFYF/Qmjjj5TE41+rObZmzc54hP/ZL+OH6blnibpvfDXlX+eN38ivFQfuxkJIGL68SJsEwNBRwW39Yw6Hl5RdI41MLCH7ByN15wifLp1JKBilHJ7XGMOUjI7P0yl7JjX8GBXUCtJbVLRugo80/yn+XQ1NdnlpbpYHNjMEQFWSODPa3pSK5McWvyQjDZDgS+IkdrZmIYJPMa7bmKH5I/edUPSmXQT905FgEwq9u8XR0SyBopli21EK9l6GkXIIvmDTYz5vT26Apvi2B4Aoazlklg+KNRUJuLGerpt6kbnU0gMSUChVkFfFhOk6GRSN3a/AUfD2FOudvMhet2QvlPHx+GYdEUr5XVo5HW42pHsqfD6eDtHd8VLTsHP0q4C8V85fNMv21lkkehy2ry8fx/RRy6x4O2wg2mua+79UkGKXp75gMKzWEcth34PCFCOu37l2F8R/ANnrQ52K/8vIQ88TtU2OpYX89fHjLojBxu+WKEBGZH2LRPsZBOUHeeO5C/xKDrhZU24ORnMW8wg66Qg5GIX1KI4a8yp73Mpues5hzpJ6wkMuRrQt40ymKndLCjv8KSd+5BfP6Or/KIrzDNYdZaasjk7JNi6rcZmm9d3fTAo+Ja/mjpUCIOo3SX14luzVCJIig="

stages:
  - name: build depends
  - name: build src
  - name: run tests
  - name: build docker
    if: repo = dashpay/dash AND branch = develop AND type = push


builddepends: &builddepends
  stage: build depends
  script:
    - run_per_target '$DOCKER_RUN_IN_BUILDER ./ci/build_depends.sh'

buildsrc: &buildsrc
  stage: build src
  script:
    - run_per_target '$DOCKER_RUN_IN_BUILDER ./ci/build_depends.sh'
    - run_per_target '$DOCKER_RUN_IN_BUILDER ./ci/build_src.sh'

runtests: &runtests
  stage: run tests
  script:
    - run_per_target '$DOCKER_RUN_IN_BUILDER ./ci/build_depends.sh'
    - run_per_target '$DOCKER_RUN_IN_BUILDER ./ci/build_src.sh'
    - run_per_target '$DOCKER_RUN_IN_BUILDER ./ci/test_unittests.sh'
    - if [ "$TRAVIS_EVENT_TYPE" = "cron" ]; then export extended="--extended --exclude pruning,dbcrash"; fi
    - run_per_target '$DOCKER_RUN_IN_BUILDER ./ci/test_integrationtests.sh --jobs=3 ${extended}'

builddocker: &builddocker
  stage: build docker
  script:
    # no need to run tests again here
    - $DOCKER_RUN_IN_BUILDER ./ci/build_depends.sh
    - $DOCKER_RUN_IN_BUILDER ./ci/build_src.sh
    - BUILD_DIR=build-ci/dashcore-$BUILD_TARGET ./docker/build-docker.sh
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
    - ./docker/push-docker.sh

jobs:
  include:
    # build depends
    - <<: *builddepends
      # These are basically building the same set of packages, so caches allow us to run everything in one job
      env: BUILD_TARGETS="linux64 linux64_nowallet linux64_release"
    - <<: *builddepends
      # arm-linux doesn't build Qt, so it should be fine to build it together with the mac build (we shouldn't hit timeouts)
      env: BUILD_TARGETS="arm-linux mac"
    - <<: *builddepends
      env: BUILD_TARGETS="linux32"
    - <<: *builddepends
      env: BUILD_TARGETS="win32"
    - <<: *builddepends
      env: BUILD_TARGETS="win64"
    # build source
    - <<: *buildsrc
      env: BUILD_TARGETS="arm-linux mac"
    - <<: *buildsrc
      env: BUILD_TARGETS="linux32 linux64"
    - <<: *buildsrc
      env: BUILD_TARGETS="linux64_nowallet linux64_release"
    - <<: *buildsrc
      env: BUILD_TARGETS="win32 win64"
    # run tests (no tests for arm-linux and mac)
    - <<: *runtests
      env: BUILD_TARGETS=linux32
    - <<: *runtests
      env: BUILD_TARGETS=linux64
    - <<: *runtests
      # We can run all these in one job as they only run unit tests
      env: BUILD_TARGETS="win32 win64 linux64_nowallet linux64_release"
    # build docker
    - <<: *builddocker
      env: BUILD_TARGET=linux64_release

before_cache:
  # Save builder image
  - run_per_target 'docker save dash-builder-$BUILD_TARGET-$TRAVIS_JOB_NUMBER $(docker history -q dash-builder-$BUILD_TARGET-$TRAVIS_JOB_NUMBER | grep -v \<missing\>) | gzip -2 > $HOME/cache/docker/dash-builder-$BUILD_TARGET.tar.gz'

install:
    # Our scripts try to be Travis agnostic
    - export PULL_REQUEST="$TRAVIS_PULL_REQUEST"
    - export JOB_NUMBER="$TRAVIS_JOB_NUMBER"
    - export HOST_SRC_DIR=$TRAVIS_BUILD_DIR
    - export HOST_CACHE_DIR=$HOME/cache
    - export TRAVIS_COMMIT_LOG=`git log --format=fuller -1`
    - >
      function run_per_target() {
        cmd="$1"
        for _BUILD_TARGET in $BUILD_TARGETS; do
          ( # make sure env vars are fresh for every BUILD_TARGET
            set -e
            export BUILD_TARGET=$_BUILD_TARGET
            echo Running commands for $BUILD_TARGET
            source ./ci/matrix.sh
            bash -c "set -e; $cmd"
          )
          exit_code="$?"
          if [ "$exit_code" != "0" ]; then
            echo "Exit Code: $exit_code"
            break
          fi
        done
        (exit $exit_code)
      }
    - run_per_target 'mkdir -p $HOST_CACHE_DIR/docker && mkdir -p $HOST_CACHE_DIR/ccache && mkdir -p $HOST_CACHE_DIR/depends && mkdir -p $HOST_CACHE_DIR/sdk-sources'
    # Load cached builder image
    - run_per_target 'if [ -f $HOST_CACHE_DIR/docker/dash-builder-$BUILD_TARGET.tar.gz ]; then zcat $HOST_CACHE_DIR/docker/dash-builder-$BUILD_TARGET.tar.gz | docker load || true; fi'
    - travis_retry docker pull ubuntu:bionic
    - travis_retry run_per_target 'docker build -t $BUILDER_IMAGE_NAME --build-arg=USER_ID=$UID --build-arg=GROUP_ID=$UID --build-arg=BUILD_TARGET=$BUILD_TARGET -f ci/Dockerfile.builder ci'
before_script:
    # Make sure stdout is in blocking mode. Otherwise builds will fail due to large writes to stdout
    # See https://github.com/travis-ci/travis-ci/issues/4704. If this gets fixed, this line can also be removed.
    - python3 -c 'import os,sys,fcntl; flags = fcntl.fcntl(sys.stdout, fcntl.F_GETFL); fcntl.fcntl(sys.stdout, fcntl.F_SETFL, flags&~os.O_NONBLOCK);'
after_script:
    - echo $TRAVIS_COMMIT_RANGE
    - echo $TRAVIS_COMMIT_LOG
