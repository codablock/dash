image: "ubuntu:bionic"

variables:
  DOCKER_DRIVER: overlay2

stages:
  - builder-image
  - build

builder-image:
  stage: builder-image
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  script:
    - cd ci
    - docker pull $CI_REGISTRY_IMAGE:builder-$CI_COMMIT_REF_SLUG || true
    - docker pull $CI_REGISTRY_IMAGE:builder-develop || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:builder-$CI_COMMIT_REF_SLUG --cache-from $CI_REGISTRY_IMAGE:builder-develop -t $CI_REGISTRY_IMAGE:builder-$CI_COMMIT_REF_SLUG -f Dockerfile.builder .
    - docker push $CI_REGISTRY_IMAGE:builder-$CI_COMMIT_REF_SLUG

.build_template: &build_template
  stage: build
  image: $CI_REGISTRY_IMAGE:builder-$CI_COMMIT_REF_SLUG
  before_script:
    - export CACHE_DIR=$CI_PROJECT_DIR/cache
    - export BUILD_TARGET="$CI_JOB_NAME"
    - echo BUILD_TARGET=$BUILD_TARGET
    - source ./ci/matrix.sh

    # Setup some environment variables
    - |
      if [ "$CI_EXTERNAL_PULL_REQUEST_IID" != "" ]; then
        export PULL_REQUEST="true"
      else
        # CI_EXTERNAL_PULL_REQUEST_IID is false every time until https://gitlab.com/gitlab-org/gitlab/issues/5667 is done
        # Until then, we're using https://github.com/brndnmtthws/labhub atm to mirror Github pull requests as branches into Gitlab,
        # which allows us to use Gitlab CI for Github. The following check detects such mirrored branches.
        if [[ $CI_COMMIT_REF_NAME =~ ^pr-[^/]*/[^/]*/[^/]*/[^/]*$ ]]; then
          export PULL_REQUEST="true"
          # CI_COMMIT_BEFORE_SHA is also invalid until #5667 is implemented, so we need to figure it out by ourself
          git fetch origin develop
          export CI_COMMIT_BEFORE_SHA="$(git merge-base origin/develop HEAD)"
        else
          export PULL_REQUEST="false"
        fi
      fi
    - export COMMIT_RANGE="$CI_COMMIT_BEFORE_SHA..$CI_COMMIT_SHA"
    - export JOB_NUMBER="$CI_JOB_ID"
    - export HOST_SRC_DIR=$CI_PROJECT_DIR
    - echo PULL_REQUEST=$PULL_REQUEST COMMIT_RANGE=$COMMIT_RANGE HOST_SRC_DIR=$HOST_SRC_DIR CACHE_DIR=$CACHE_DIR
    - echo "Commit log:" && git log --format=fuller -1

  script:
    - export BUILD_TARGET="$CI_JOB_NAME"
    - cd $CI_PROJECT_DIR
    - ./ci/build_depends.sh
    - ./ci/build_src.sh
    - ./ci/test_unittests.sh
    - ./ci/test_integrationtests.sh --extended --exclude pruning,dbcrash

  after_script:
    - mkdir -p $CI_PROJECT_DIR/testlogs

  cache:
    # Let all branches share the same cache, which is ok because ccache is able to handle it
    key: ${CI_JOB_NAME}
    paths:
      - $CI_PROJECT_DIR/cache/ccache
  artifacts:
    name: testlogs
    when: always
    paths:
      - $CI_PROJECT_DIR/testlogs
    expire_in: 3 days

arm-linux:
  <<: *build_template

win32:
  <<: *build_template

win64:
  <<: *build_template

linux32:
  <<: *build_template

linux64:
  <<: *build_template

linux64_nowallet:
  <<: *build_template

linux64_release:
  <<: *build_template

mac:
  <<: *build_template
